class Solution:
    def intToRoman(self, num: int) -> str:
        # Write your code here
        if num in range (1, 4, 1):
            return "I" * num
        if num == 4:
            return "IV"
        if num == 5:
            return "V"
        if num in range (6, 9, 1):
            return "V" + "I" * (num - 5)
        if num == 9:
            return "IX"
        if num in range (10, 100):
            return get_prefix_from_10_to_90 (num // 10 * 10) + get_suffix (num)
        if num in range (100, 1000):
            return get_prefix_from_100_to_900 (num // 100 * 100) + get_prefix_from_10_to_90(((num - (num // 100) * 100) // 10) * 10) + get_suffix (num)
        if num in range (1000, 4000):
            return get_prefix_from_1000_to_3000 (num // 1000 * 1000) + get_prefix_from_100_to_900(((num - (num // 1000 * 1000)) // 100) * 100) + get_prefix_from_10_to_90((((num - (num // 1000 * 1000)) - (((num - (num // 1000 * 1000)) // 100) * 100)) // 10) * 10) + get_suffix (num)
    
def get_prefix_from_10_to_90 (num):
    if (num < 10 or num > 90):
        return ""
    if num in range (10, 31, 10):
        return "X" * (num // 10)
    if num == 40: 
        return "XL"
    if num == 50:
        return "L"
    if num in range (60, 81, 10):
        return "L" + "X" * ((num - 50) // 10)
    if num == 90:
        return "XC"
    
def get_prefix_from_100_to_900 (num):
    if (num < 100 or num > 900):
        return ""
    if num in range (100, 301, 100):
        return "C" * (num // 100)
    if num == 400:
        return "CD"
    if num == 500:
        return "D"
    if num in range (600, 801, 100):
        return "D" + "C" * ((num - 500) // 100)
    if num == 900:
        return "CM"

def get_prefix_from_1000_to_3000 (num):
    if (num < 1000 or num > 3000):
        return ""
    return "M" * (num // 1000) 

def get_suffix (num):
    if num % 10 == 0:
        return ""
    if num % 10 in [1, 2, 3]:
        return "I" * (num % 10)
    if num % 10 == 4:
        return "IV"
    if num % 10 == 5:
        return "V"
    if num % 10 in [6, 7, 8]:
        return "V" + "I" * (num % 10 - 5)
    if num % 10 == 9:
        return "IX"
